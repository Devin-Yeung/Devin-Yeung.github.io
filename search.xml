<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>使用Hexo搭建个人Blog</title>
    <url>/2020/01/01/Hexo-NexT/</url>
    <content><![CDATA[<h1 id="基本建站配置"><a href="#基本建站配置" class="headerlink" title="基本建站配置"></a>基本建站配置</h1><h1 id="样式配置"><a href="#样式配置" class="headerlink" title="样式配置"></a>样式配置</h1><h2 id="在-Hexo-中支持-Mathjax"><a href="#在-Hexo-中支持-Mathjax" class="headerlink" title="在 Hexo 中支持 Mathjax"></a>在 Hexo 中支持 Mathjax</h2><h3 id="1-使用Kramed代替-Marked"><a href="#1-使用Kramed代替-Marked" class="headerlink" title="1.使用Kramed代替 Marked"></a>1.使用Kramed代替 Marked</h3><p><code>hexo</code> 默认的渲染引擎是 <code>marked</code>，但是 <code>marked</code> 不支持 <code>mathjax</code>。 <code>kramed</code> 是在 <code>marked</code> 的基础上进行修改。我们在工程目录下执行以下命令来安装 <code>kramed</code>.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure>
<p>然后，更改<code>&lt;your-project-dir&gt;/node_modules/hexo-renderer-kramed/lib/renderer.js</code>，更改：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Change inline math rule</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatText</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Fit kramed's rule: $$ + \1 + $$</span></span><br><span class="line">    <span class="keyword">return</span> text.replace(<span class="regexp">/`\$(.*?)\$`/g</span>, <span class="string">'$$$$$1$$$$'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Change inline math rule</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatText</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-停止使用-hexo-math"><a href="#2-停止使用-hexo-math" class="headerlink" title="2.停止使用 hexo-math"></a>2.停止使用 hexo-math</h3><p>首先，如果你已经安装 <code>hexo-math</code>, 请卸载它：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-math --save</span><br></pre></td></tr></table></figure>
<p>然后安装 <a href="https://github.com/phoenixcw/hexo-renderer-mathjax" target="_blank" rel="noopener">hexo-renderer-mathjax</a> 包：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-mathjax --save</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="3-更新-Mathjax-的-CDN-链接（可选）"><a href="#3-更新-Mathjax-的-CDN-链接（可选）" class="headerlink" title="3.更新 Mathjax 的 CDN 链接（可选）"></a>3.更新 Mathjax 的 CDN 链接（可选）</h3><p>首先，打开<code>&lt;path-to-your-project&gt;/node_modules/hexo-renderer-mathjax/mathjax.html</code></p>
<p>然后，把<code>&lt;script&gt;</code>更改为：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="4-更改默认转义规则"><a href="#4-更改默认转义规则" class="headerlink" title="4.更改默认转义规则"></a>4.更改默认转义规则</h3><p>因为 <code>hexo</code> 默认的转义规则会将一些字符进行转义，比如 <code>_</code> 转为 <code>&lt;em&gt;</code>, 所以我们需要对默认的规则进行修改.<br> 首先， 打开<code>&lt;path-to-your-project&gt;/node_modules/kramed/lib/rules/inline.js</code>,</p>
<p>然后，把:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">escape</span>: <span class="regexp">/^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/</span>,</span><br></pre></td></tr></table></figure>
<p>更改为:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">escape</span>: <span class="regexp">/^\\([`*\[\]()# +\-.!_&gt;])/</span>,</span><br></pre></td></tr></table></figure>
<p>把:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">em: <span class="regexp">/^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br></pre></td></tr></table></figure>
<p>更改为:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">em: <span class="regexp">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br></pre></td></tr></table></figure>
<h3 id="5-开启Mathjax"><a href="#5-开启Mathjax" class="headerlink" title="5.开启Mathjax"></a>5.开启Mathjax</h3><p>在主题 <code>_config.yml</code> 中开启 <code>Mathjax</code>， 找到 <code>mathjax</code> 字段添加如下代码：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>这一步可选，在博客中开启 <code>Mathjax</code>，， 添加以下内容：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Testing Mathjax with Hexo</span><br><span class="line">category: Uncategorized</span><br><span class="line">date: 2017/05/03</span><br><span class="line">mathjax: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>通过以上步骤，我们就可以在 <code>hexo</code> 中使用 <code>Mathjax</code> 来书写数学公式。</p>
<p>Reference: <a href="https://www.jianshu.com/p/e8d433a2c5b7" target="_blank" rel="noopener">如何在 hexo 中支持 Mathjax？</a></p>
<h2 id="在Hexo折叠-显示-隐藏-部分文字"><a href="#在Hexo折叠-显示-隐藏-部分文字" class="headerlink" title="在Hexo折叠(显示/隐藏)部分文字"></a>在Hexo折叠(显示/隐藏)部分文字</h2><h3 id="1-安装插件"><a href="#1-安装插件" class="headerlink" title="1.安装插件"></a>1.安装插件</h3><p>安装<code>hexo-sliding-spoiler</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-sliding-spoiler --save</span><br></pre></td></tr></table></figure>
<h3 id="2-使用方式"><a href="#2-使用方式" class="headerlink" title="2.使用方式"></a>2.使用方式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% spoiler "隐藏内容的标题" %&#125;</span><br><span class="line">正文</span><br><span class="line"><span class="comment">&lt;!--支持MathJax/代码块--&gt;</span></span><br><span class="line">&#123;% endspoiler %&#125;</span><br></pre></td></tr></table></figure>
<p>Reference: <a href="https://www.faker.top/2020/02/14/Hexo/h6-%E6%8A%98%E5%8F%A0%E6%96%87%E5%AD%97/" target="_blank" rel="noopener">Hexo博客如何折叠(显示/隐藏)部分文字</a></p>
<h1 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h1><h2 id="自动-amp-手动备份Hexo源文件"><a href="#自动-amp-手动备份Hexo源文件" class="headerlink" title="自动&amp;手动备份Hexo源文件"></a>自动&amp;手动备份Hexo源文件</h2><h3 id="1-在github新建repository"><a href="#1-在github新建repository" class="headerlink" title="1.在github新建repository"></a>1.在github新建repository</h3><p>在Github下创建一个新的<code>repository</code>，取名为<code>BlogSource</code>。(与本地的Hexo源码文件夹同名最好)<br>创建的时候<strong>最好为空</strong>，最好<strong>不要</strong>勾选创建<code>README.md</code>,否则后面会有小问题，不过我会提供解决办法。</p>
<h3 id="2-创建仓库"><a href="#2-创建仓库" class="headerlink" title="2.创建仓库"></a>2.创建仓库</h3><p>进入本地的Blog文件夹，在这个地方使用<code>git Bash here</code>执行以下命令创建仓库:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
<h3 id="3-修改-gitignore文件"><a href="#3-修改-gitignore文件" class="headerlink" title="3.修改.gitignore文件"></a>3.修改.gitignore文件</h3><p>如果没有请手动创建一个，在里面加入<code>*.log</code> 和 <code>public/</code> 以及<code>.deploy*/</code>。因为每次执行<code>hexo g</code>命令时，上述目录都会被重写更新。因此忽略这两个目录下的文件更新，加快push速度。<br>注：如果文件中有<code>*.log</code> 和 <code>public/</code> 以及<code>.deploy*/</code>这些的时候，直接进行下一步：</p>
<h3 id="4-提交Hexo源码"><a href="#4-提交Hexo源码" class="headerlink" title="4.提交Hexo源码"></a>4.提交Hexo源码</h3><p>执行以下命令，完成Hexo源码在本地的提交：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;添加hexo源码文件作为备份&quot;</span><br></pre></td></tr></table></figure>
<h3 id="5-设置远程仓库地址"><a href="#5-设置远程仓库地址" class="headerlink" title="5.设置远程仓库地址"></a>5.设置远程仓库地址</h3><p>复制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:Devin-Yeung&#x2F;BlogSource.git</span><br></pre></td></tr></table></figure>
<p>如果出现问题：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fatal: remote origin already exists</span><br></pre></td></tr></table></figure>
<p>解决办法如下：<br>（1）先删除远程 Git 仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote rm origin</span><br></pre></td></tr></table></figure>
<p>（2）再添加远程 Git 仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:Devin-Yeung&#x2F;BlogSource.git</span><br></pre></td></tr></table></figure>
<p>发现问题成功解决。</p>
<p>注意：如果在GitHub上创建远程仓库时，勾选了 Initialize this repository with a README这项，导致远程仓库不为空，为了不出现Bug，请先执行第6步(远程仓库合并到本地)，若远程仓库为空，则忽略第6步，直接进行第7步操作！</p>
<h3 id="7-更新远程仓库"><a href="#7-更新远程仓库" class="headerlink" title="7.更新远程仓库"></a>7.更新远程仓库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
<h3 id="8-自动备份原理"><a href="#8-自动备份原理" class="headerlink" title="8.自动备份原理"></a>8.自动备份原理</h3><p>通过监听Hexo的事件来完成自动执行Git命令进行自动备份，查阅<a href="https://hexo.io/zh-cn/api/events.html" target="_blank" rel="noopener">Hexo文档</a>，找到了Hexo的主要事件，见下表：</p>
<p>：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">事件名</th>
<th style="text-align:center">事件发生时间</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">deployBefore</td>
<td style="text-align:center">在部署完成前发布</td>
</tr>
<tr>
<td style="text-align:center">deployAfter</td>
<td style="text-align:center">在部署成功后发布</td>
</tr>
<tr>
<td style="text-align:center">exit</td>
<td style="text-align:center">在 Hexo 结束前发布</td>
</tr>
<tr>
<td style="text-align:center">generateBefore</td>
<td style="text-align:center">在静态文件生成前发布</td>
</tr>
<tr>
<td style="text-align:center">generateAfter</td>
<td style="text-align:center">在静态文件生成后发布</td>
</tr>
<tr>
<td style="text-align:center">new</td>
<td style="text-align:center">在文章文件建立后发布</td>
</tr>
</tbody>
</table>
</div>
<p>于是我们就可以通过监听Hexo的<code>deployAfter</code>事件，待上传完成之后自动运行Git备份命令，从而达到自动备份的目的。</p>
<h3 id="9-将Hexo目录加入Git仓库"><a href="#9-将Hexo目录加入Git仓库" class="headerlink" title="9.将Hexo目录加入Git仓库"></a>9.将Hexo目录加入Git仓库</h3><p>本脚本需要提前将Hexo加入Git仓库并与Github或者Gitee远程仓库绑定之后，才能正常工作。如果你不知道该怎样进行操作，可以参考前文内容。</p>
<h3 id="10-安装shelljs模块"><a href="#10-安装shelljs模块" class="headerlink" title="10.安装shelljs模块"></a>10.安装<code>shelljs</code>模块</h3><p>要实现这个自动备份功能，需要依赖NodeJs的一个<code>shelljs</code>模块,该模块重新包装了<code>child_process</code>,调用系统命令更加的方便，该模块需要安装后使用。</p>
<p>在命令中键入以下命令，完成<code>shelljs</code>模块的安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save shelljs</span><br></pre></td></tr></table></figure>
<h3 id="10-编写自动备份脚本"><a href="#10-编写自动备份脚本" class="headerlink" title="10.编写自动备份脚本"></a>10.编写自动备份脚本</h3><p><code>shelljs</code>模块安装完成后，在<code>Hexo</code>根目录的<code>scripts</code>文件夹下新建一个js文件，文件名随意取(我的文件名为:<code>auto_backup.js</code>)。如果没有<code>scripts</code>目录，请新建一个。</p>
<p>然后在脚本中，写入以下内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'shelljs/global'</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    hexo.on(<span class="string">'deployAfter'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">//当deploy完成后执行备份</span></span><br><span class="line">        run();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"产生了一个错误啊&lt;(￣3￣)&gt; !，错误详情为："</span> + e.toString());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!which(<span class="string">'git'</span>)) &#123;</span><br><span class="line">        echo(<span class="string">'Sorry, this script requires git'</span>);</span><br><span class="line">        exit(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        echo(<span class="string">"======================Auto Backup Begin==========================="</span>);</span><br><span class="line">        cd(<span class="string">'C:/Users/devin/Desktop/Workspace/Blog'</span>);    <span class="comment">//此处修改为Hexo根目录路径</span></span><br><span class="line">        <span class="keyword">if</span> (exec(<span class="string">'git add --all'</span>).code !== <span class="number">0</span>) &#123;</span><br><span class="line">            echo(<span class="string">'Error: Git add failed'</span>);</span><br><span class="line">            exit(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (exec(<span class="string">'git commit -am "blog auto backup script\'s commit"'</span>).code !== <span class="number">0</span>) &#123;</span><br><span class="line">            echo(<span class="string">'Error: Git commit failed'</span>);</span><br><span class="line">            exit(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (exec(<span class="string">'git push origin master'</span>).code !== <span class="number">0</span>) &#123;</span><br><span class="line">            echo(<span class="string">'Error: Git push failed'</span>);</span><br><span class="line">            exit(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        echo(<span class="string">"==================Auto Backup Complete============================"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：</p>
<ul>
<li>其中，需要修改第16行的<code>C:/Users/devin/Desktop/Workspace/Blog</code>路径为Hexo的根目录路径。(脚本中的路径为博主的Hexo路径）</li>
<li>如果你的Git远程仓库名称不为origin的话，还需要修改第25行执行的push命令，修改成自己的远程仓库名和相应的分支名。</li>
</ul>
<p>Reference :</p>
<p><a href="https://wugenqiang.gitee.io/articles/manual_backup_blog_source_files.html" target="_blank" rel="noopener">Git命令手动备份Hexo博客源文件</a></p>
<p><a href="https://wugenqiang.gitee.io/articles/auto_backup_blog_source_files.html" target="_blank" rel="noopener">自动备份Hexo博客源文件</a></p>
<h1 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h1><h2 id="Hexo引用图片无法显示"><a href="#Hexo引用图片无法显示" class="headerlink" title="Hexo引用图片无法显示"></a>Hexo引用图片无法显示</h2><h3 id="1-安装插件-1"><a href="#1-安装插件-1" class="headerlink" title="1.安装插件"></a>1.安装插件</h3><p>首先我们需要安装一个图片路径转换的插件，这个插件名字是<code>hexo-asset-image</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>
<p>或使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install https:&#x2F;&#x2F;github.com&#x2F;CodeFalling&#x2F;hexo-asset-image --save</span><br></pre></td></tr></table></figure>
<h3 id="2-修改插件"><a href="#2-修改插件" class="headerlink" title="2.修改插件"></a>2.修改插件</h3><p>但是这个插件的内容需要修改【不然可能会出Bug】</p>
<p>打开<code>/node_modules/hexo-asset-image/index.js</code>,将内容更换为下面的代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="built_in">String</span>(hexo.version).split(<span class="string">'.'</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">'after_post_render'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">    	<span class="keyword">var</span> link = data.permalink;</span><br><span class="line">	<span class="keyword">if</span>(version.length &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">	   <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	   <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">	<span class="comment">// In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".</span></span><br><span class="line">	<span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">'/'</span>) + <span class="number">1</span>;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">'excerpt'</span>, <span class="string">'more'</span>, <span class="string">'content'</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">        xmlMode: <span class="literal">false</span>,</span><br><span class="line">        lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">        decodeEntities: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">'img'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> ($(<span class="keyword">this</span>).attr(<span class="string">'src'</span>))&#123;</span><br><span class="line">			<span class="comment">// For windows style path, we replace '\' to '/'.</span></span><br><span class="line">			<span class="keyword">var</span> src = $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>);</span><br><span class="line">			<span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;</span><br><span class="line">			   !<span class="regexp">/^\s*\//</span>.test(src)) &#123;</span><br><span class="line">			  <span class="comment">// For "about" page, the first part of "src" can't be removed.</span></span><br><span class="line">			  <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">			  <span class="keyword">var</span> linkArray = link.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">				<span class="keyword">return</span> elem != <span class="string">''</span>;</span><br><span class="line">			  &#125;);</span><br><span class="line">			  <span class="keyword">var</span> srcArray = src.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">				<span class="keyword">return</span> elem != <span class="string">''</span> &amp;&amp; elem != <span class="string">'.'</span>;</span><br><span class="line">			  &#125;);</span><br><span class="line">			  <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line">				srcArray.shift();</span><br><span class="line">			  src = srcArray.join(<span class="string">'/'</span>);</span><br><span class="line">			  $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>, config.root + link + src);</span><br><span class="line">			  <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"update link as:--&gt;"</span>+config.root + link + src);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"no src attr, skipped..."</span>);</span><br><span class="line">			<span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="keyword">this</span>));</span><br><span class="line">		&#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="3-修改配置内容"><a href="#3-修改配置内容" class="headerlink" title="3.修改配置内容"></a>3.修改配置内容</h3><p>打开<code>_config.yml</code>文件，修改下述内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure>
<p>Reference: <a href="https://blog.csdn.net/xjm850552586/article/details/84101345" target="_blank" rel="noopener">hexo引用本地图片无法显示</a></p>
<h2 id="NexT主题：侧栏中的archives打开的链接错误"><a href="#NexT主题：侧栏中的archives打开的链接错误" class="headerlink" title="NexT主题：侧栏中的archives打开的链接错误"></a>NexT主题：侧栏中的archives打开的链接错误</h2><h3 id="1-问题定位"><a href="#1-问题定位" class="headerlink" title="1.问题定位"></a>1.问题定位</h3><p>当鼠标移到archives时, 访问的链接是域名<code>/archives/%7C%7C%20archive/</code>, 可见后面的<code>%7C%7C%20</code>多余了, 问题就是删除后面多余字符</p>
<p>解决多余字符：archives的<code>class=&quot;site-state-item site-state-posts&quot;</code></p>
<p>打开博客根目录<code>/themes/next/layout/_macro/sidebar.swig</code>, 搜索<code>class</code>的值, 快速定位错误位置.</p>
<h3 id="2-修改代码"><a href="#2-修改代码" class="headerlink" title="2.修改代码"></a>2.修改代码</h3><p>修改之前的代码为:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if config.archive_dir != '/' and site.posts.length &gt; 0 %&#125;</span><br><span class="line">             <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-state-item site-state-posts"</span>&gt;</span></span><br><span class="line">             &#123;% if theme.menu.archives %&#125;</span><br><span class="line">               <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for(theme.menu.archives).split('||')[0] | trim &#125;&#125;"</span>&gt;</span></span><br><span class="line">             &#123;% else %&#125;</span><br><span class="line">               <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for(config.archive_dir) &#125;&#125;"</span>&gt;</span></span><br><span class="line">             &#123;% endif %&#125;</span><br><span class="line">                 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-count"</span>&gt;</span>&#123;&#123; site.posts.length &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-name"</span>&gt;</span>&#123;&#123; __('state.posts') &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<p>修改之后:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if config.archive_dir != '/' and site.posts.length &gt; 0 %&#125;</span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-state-item site-state-posts"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for(config.archive_dir) &#125;&#125;"</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-count"</span>&gt;</span>&#123;&#123; site.posts.length &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-name"</span>&gt;</span>&#123;&#123; __('state.posts') &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<p>即:<strong>将中间的判断删掉, 保留下面else的内容即可解决该问题</strong></p>
<p>Reference:<a href="https://blog.csdn.net/qq_36852780/article/details/104680152" target="_blank" rel="noopener">侧栏中的posts打开的链接错误,修改链接 - Hexo建站(五)</a></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.jianshu.com/p/e8d433a2c5b7" target="_blank" rel="noopener">https://www.jianshu.com/p/e8d433a2c5b7</a></p>
<p><a href="https://blog.csdn.net/xjm850552586/article/details/84101345" target="_blank" rel="noopener">https://blog.csdn.net/xjm850552586/article/details/84101345</a></p>
<p><a href="https://www.jianshu.com/p/3a05351a37dc" target="_blank" rel="noopener">https://www.jianshu.com/p/3a05351a37dc</a></p>
<p><a href="https://blog.csdn.net/qq_36759224/article/details/82121420" target="_blank" rel="noopener">https://blog.csdn.net/qq_36759224/article/details/82121420</a></p>
<p><a href="https://blog.csdn.net/qq_36852780/article/details/104680152" target="_blank" rel="noopener">https://blog.csdn.net/qq_36852780/article/details/104680152</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>DNA超螺旋相关问题的探究</title>
    <url>/2020/04/25/supercoil-of-dna/</url>
    <content><![CDATA[<p>当DNA双螺旋的轴缠绕在其自身上时，它将形成新的螺旋，这种螺旋被称为超螺旋（supercoil），对于环状DNA分子，<strong>只要不引入断裂，其拓扑学特性便不会受到DNA链变形的影响</strong>。仅通过断开或重新连接一根或两条DNA链的骨架，即可改变拓扑学特性。<br><a id="more"></a><br><img src="/2020/04/25/supercoil-of-dna/1585480896520.png" alt="1585480896520"></p>
<p>对于闭环分子中的长度为84bp的DNA片段，如果是呈松弛构象，则会形成8个螺旋，因为对于一个B-DNA，每10.5个bp将会上升一圈，所以对于一个84bp的片段，会形成$\frac{84}{10.5}=8$个螺旋（见图24-13.a）<img src="/2020/04/25/supercoil-of-dna/1585480948998.png" alt="1585480948998"></p>
<p>连环数(Linking number,$Lk$)是双链DNA的拓扑属性，因为当DNA弯曲或变形时，<strong>只要两条DNA链保持完整，连环数就不会改变</strong>（这就解释了为什么topo异构酶是通过”剪开”DNA链的方式改变DNA链的超螺旋情况的），在确定一条链的情况下，<strong>连环数可以定义为第二条链穿透该平面的次数</strong>。当$Lk=1$(见图24-14.a)和$LK=6$(见图24-14.b)时情况如图所示</p>
<p><img src="/2020/04/25/supercoil-of-dna/1585480981693.png" alt="1585480981693"></p>
<p>当分子松弛时，<strong>连环数</strong>就是<strong>碱基对的数目</strong>除以<strong>每个螺旋中碱基对的数目</strong>，即</p>
<script type="math/tex; mode=display">
连环数=\frac{碱基对的数目}{每个螺旋中碱基对的数目}</script><p>对于一个长达2100bp的B-DNA，每个螺旋大致上由<strong>10.5个</strong>碱基对组成。因此，在这种情况下，$Lk =\frac{2100}{10.5}=200$（见图24-15.a）要使环状DNA分子具有诸如连环数之类的拓扑特性，两条链必须完整无间断。如果任一根链断裂，则原则上可以将两条链解开并完全分开。在这种情况下，不存在拓扑键，并且$Lk$不确定（见图24-15.b）</p>
<p><img src="/2020/04/25/supercoil-of-dna/1585481009470.png" alt="1585481009470"></p>
<p>因此，我们可以根据连环数数的变化来描述DNA状态变化，以<strong>松弛DNA</strong>中的连环数$Lk_{0}$作为参考，如果从该DNA分子中去除两个螺旋，则$Lk =198$。该变化可用等式描述（见公式1），通常以与DNA分子的长度无关的量表示连环数的变化是方便的。这个量称为<strong>比连环差</strong>或超螺旋密度（$\sigma$），是相对于松弛DNA中存在的螺旋数而言，去除的螺旋数的量度（见公式2）</p>
<script type="math/tex; mode=display">
\begin{align}
\Delta Lk &=Lk-Lk_{0} \\
& = 198-200 = -2 \tag{1} \\
\\
\sigma &=\frac{\Delta Lk}{Lk_{0}} \tag{2}
\end{align}</script><p>在图24-15.c的示例中，$\sigma= 0.01$，这意味着B-DNA中存在的$1\%$（200个中的2个）螺旋已被去除。细胞内的DNA的比连环差通常在$5\%$~$7\%$的范围内，即$\sigma = -0.05$至$-0.07$。其中负号表示连环数的变化是由于DNA的不足所致。因此，将DNA缠绕不足引起的超螺旋定义为负超螺旋。相反，在某些条件下，DNA可能会被过度缠绕，导致正超螺旋。</p>
<p><img src="/2020/04/25/supercoil-of-dna/1585495892661.png" alt="1585495892661"></p>
<p>通过Topo异构酶的作用断开一条DNA链，将一条链的末端绕另一条未断裂的链旋转360°，然后重新连接断裂的末端，可以将连环数改变$\pm1$。</p>
<p>所以，DNA的拓扑学结构可以由以下方程式描述（见公式3）</p>
<script type="math/tex; mode=display">
L = T +W \tag{3}</script><p>其中$T$是扭转数（twisting number），指DNA双螺旋的总转数，在“松弛”状态下，即DNA不发生超螺旋，此时的$T = L$，对于一个不发生超螺旋B-DNA，其$T$值应为碱基对数/10</p>
<p>其中$W$为缠绕数（writhing number），指超螺旋数，即$W = \Delta Lk$，当DNA为正超螺旋时，$W$为正数，当DNA为负超螺旋时，$W$为负数</p>
<p><img src="/2020/04/25/supercoil-of-dna/1585498098090.png" alt="1585555002097"></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Biochemistry</category>
      </categories>
      <tags>
        <tag>Biochemistry</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/04/24/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
  </entry>
</search>
